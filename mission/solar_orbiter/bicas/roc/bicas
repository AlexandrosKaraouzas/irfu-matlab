#!/bin/bash
#====================================================================================================
# Author: Erik P G Johansson, IRF-U, Uppsala, Sweden
# First created 2016-04-xx
#
# The primary purpose of this bash script is to call a MATLAB script.
# See readme.txt for more information on arguments.
# See the MATLAB script called for more documentation.
#
#
#
# NOTE: The script is designed to handle important basic errors, such as
# 1) Can not find MATLAB executable (not explicitly, but implicitly)
# 2) MATLAB can not find the MATLAB script.
# 
# NOTE: The script is designed to return the same exit codes as the MATLAB code.
# 
# NOTE: The script reads the "--log" parameter value and pipes "all" stdout to a log file. 
# It also uses a prefix to filter out some stdout lines that are piped to the actual stdout.
# In addition, a symlink (with a constant filename) to the current log file is created.
# Overwriting the old symlink might technically not be compliant with the RCS ICD.
# 
# NOTE: The script takes stderr and copy it to the log file with a prefix.
# 
# 
# 
# IMPLEMENTATION NOTE: Reasons to pipe MATLAB's stdout to the log file
# from this bash script rather than from MATLAB code:
# 1) avoid manually having to pipe everything to log file in MATLAB code.
# 2) can handle stdout from library MATLAB code that prints to stdout (code that should not be altered, e.g. in irfu-matlab, e.g. irf.log)
# 3) can handle stdout from the MATLAB startup process
# 
# IMPLEMENTATION NOTE: The same arguments that are passed to this script are passed on to the MATLAB code, including
# arguments which are unnecessary there, including --log <dir> and --config <file>.
# PRO (Reasons for):
# 1) It is best to let as much parameter-parsing (incl. syntax checking) code to be in one place as possible (the MATLAB code).
# 2) Enable the MATLAB code to print all the command-line parameters in error messages and to the log file.
# 3) Enable the MATLAB code to print its syntax which is then identical to the syntax of this script.
# CON: The MATLAB code needs some knowledge of the parameter parsing in this script.
#
# IMPLEMENTATION NOTE: The name of this file may only contain alphanumeric characters. Can therefore not use 
# the file extension ".sh" to indicate that it is a shell script.
# /ROC-TST-GSE-ICD-00023-LES, iss02rev02, Section 3.1.
# 
#====================================================================================================
# QUESTION: If log file already exists, overwrite, amend, or error?
# PROPOSAL: Better error message when can not find MATLAB_COMMAND. Common error.
# PROPOSAL: Detect presence of bicas within irfu-matlab (avoid there being two bicas).
#====================================================================================================



# Search pattern that determines which stdout (in particular from MATLAB) that is actually piped to stdout.
# NOTE: This pattern must match the corresponding prefix used in MATLAB.
declare -r STDOUT_PATTERN='^STDOUT: '    # NOTE: Regex. Includes "^" = beginning of line.

# Prefix added to stdout when it is added to the log.
declare -r STDERR_PREFIX='STDERR: '   # NOTE: Not a regex (but will code will misbehave for regex commands)!

# Name of script such as it is called from inside MATLAB, i.e. WITHOUT file extension ".m".
declare -r MATLAB_SCRIPT_NAME="bicas"

# The two alternatives for where the root irfu-matlab directory may be relative to the BICAS root directory.
declare -r INNER_IRFUMATLAB_RELATIVE_PATH="lib/irfu-matlab"    # Needed to detect the presence/absence of the directory.
declare -r OUTER_IRFUMATLAB_RELATIVE_PATH="../../.."







#========================================
# Extract relevant (optional) arguments:
# (1) log directory
# (2) config file
#========================================
for ((i=1; i<$#; i++))      # NOTE: Intentionally omit the last argument.
do
    if [[ "${!i}" == "--log" ]]
    then
        let i=i+1
        declare -r log_dir="${!i}"
    elif [[ "${!i}" == "--config" ]]
    then
        let i=i+1
        declare -r config_file_argument="${!i}"
    fi
done







#===================================================================================
# Find (absolute) paths by using the path to this executable + relative paths.
# Assumes that this executable is located under a subdirectory of $BICAS_ROOT_PATH.
#
# NOTE: Some paths might not exist on disk and one can not use readlink on non-existent paths.
#===================================================================================
temp=$(dirname "$0")/..
declare -r BICAS_ROOT_PATH=$(readlink -f "$temp")
declare -r DEFAULT_CONFIG_FILE="${BICAS_ROOT_PATH}/config/bicas.conf"
declare -r INNER_IRFUMATLAB_PATH="${BICAS_ROOT_PATH}/${INNER_IRFUMATLAB_RELATIVE_PATH}"   
declare -r OUTER_IRFUMATLAB_PATH="${BICAS_ROOT_PATH}/${OUTER_IRFUMATLAB_RELATIVE_PATH}"

# Set IRFUMATLAB_PATH : Path to irfu-matlab directory.
# The value is selected depending on the directory structure used.
if [[ -d "$INNER_IRFUMATLAB_PATH" ]] ; then
    declare -r IRFUMATLAB_PATH="$INNER_IRFUMATLAB_PATH"
else
    declare -r IRFUMATLAB_PATH="$OUTER_IRFUMATLAB_PATH"
fi







#=====================================
# Construct path and name of log file
#=====================================
if [[ ! -z "$log_dir" ]]
then
    if [[ ! -d "$log_dir" ]] ; then
        echo "Can not find specified log directory \"$log_dir\"." >> /dev/stderr
        exit 1
    fi
    base=$(basename "$0")
    timestamp=$(date +%Y-%m-%d_%H.%M.%S)   # LOCAL time, not UTC.
    log_file="${log_dir}/${base}_${timestamp}.log"
    log_file_symlink="${log_dir}/${base}_latest.log"
    
    
    
    #=====================================================
    # Test if can create (write) to the proposed log file
    #=====================================================
    touch "$log_file"
    if [[ $? != 0 ]] ; then
        echo "Can not write to log file \"$log_file\"." >> /dev/stderr
        exit 1
    fi



    #=================================================================
    # Create symlink to latest/current log.
    # NOTE: This may technically be in violation of the RSC ICD 
    # when removing/overwriting an old symlink.
    # 
    # test options:
    #        -h FILE
    #               FILE exists and is a symbolic link (same as -L)
    # 
    # ln options:
    #        -r, --relative
    #               create symbolic links relative to link location
    #=================================================================
    if [[ -h "$log_file_symlink" ]] ; then
        rm -v "$log_file_symlink" >> "$log_file"
    fi
    ln -srv "$log_file" "$log_file_symlink" >> "$log_file"

else
    log_file='/dev/null'
fi



#==================================
# Determine config file and run it
#==================================
if [[ -z "$config_file_argument" ]] ; then
    # CASE: No config file argument set (or it is an empty string).
    config_file="$DEFAULT_CONFIG_FILE"
else
    # CASE: Config file argument set.
    # Canonical paths are useful for error messages/debugging on paths with symbolic links.
    config_file=$(readlink -f "$config_file_argument")
fi
if [[ ! -f "$config_file" ]] ; then
    echo "Can not find configuration file \"$config_file\"." >> /dev/stderr
    exit 1
fi
source "$config_file"   # Sets MATLAB_COMMAND.







# DEBUG: Always piped to the actual stdout. Useful for debugging.
#echo log_dir           = "$log_dir"
#echo log_file          = "$log_file"
#echo log_file_symlink  = "$log_file_symlink"
#echo "BICAS_ROOT_PATH  = \"$BICAS_ROOT_PATH\""
#echo "MATLAB_COMMAND   = \"$MATLAB_COMMAND\""
#echo "IRFUMATLAB_PATH  = \"$IRFUMATLAB_PATH\""
#echo "config_file      = \"$config_file\""
#echo "log_file         = \"$log_file\""



echo "Command-line arguments: $@" >> "$log_file"



# Any CALL to this function should appropriately pipe stdout and stderr to log file.
# Therefore code inside of it does not need to do this.
launch_matlab_code() {

    echo "BICAS_ROOT_PATH  = \"$BICAS_ROOT_PATH\""
    echo "MATLAB_COMMAND   = \"$MATLAB_COMMAND\""
    echo "IRFUMATLAB_PATH  = \"${IRFUMATLAB_PATH}\""
    echo "config_file      = \"$config_file\""
    echo "log_file         = \"$log_file\""



    #=======================================================================
    # Convert arguments into one long string that MATLAB code
    # can interpret as a list of arguments.
    # NOTE: Can not handle arguments containing the character single quote.
    #=======================================================================
    local matlab_arg_list=""
    for arg in "$@"
    do
        if [[ -z "$matlab_arg_list" ]]   # if string is empty
        then
            matlab_arg_list="'$arg'"
        else
            matlab_arg_list="$matlab_arg_list, '$arg'"
        fi
    done



    #=============================================================================
    # MATLAB options:
    #
    #     -r MATLAB_command    - Start MATLAB and execute the MATLAB_command.
    #     -nodesktop           - Do not start the MATLAB desktop. Use the current
    #                            terminal for commands. The Java virtual machine
    #                            will be started.
    #     -nojvm               - Shut off all Java support by not starting the
    #                            Java virtual machine. In particular the MATLAB
    #                            desktop will not be started.
    #     -nosplash            - Do not display the splash screen during startup.
    #
    # NOTE: The MATLAB code supplied here is to make sure that the code works well in case of failure.
    # 1) MATLAB will NOT EXIT unless the code itself calls "exit".
    # 2) MATLAB hangs if it can not find the MATLAB script.
    # NOTE: It is very important to end lines with semicolons and backslash for
    # the command line-supplied MATLAB code to not yield syntax error AND NOT HANG.
    # 
    # NOTE: Do not change directory, so that the current working directory is the same
    # in MATLAB as here. This is necessary for MATLAB code to correctly interpret relative paths (arguments).
    # NOTE: The irfu-matlab code itself adds subdirectories to irfu-matlab/. "genpath is therefor not required.
    #=============================================================================
    echo "Launching MATLAB, using \"${MATLAB_COMMAND}\"."
    "${MATLAB_COMMAND}" -nodisplay -r "\
        try;\
            addpath(genpath('${BICAS_ROOT_PATH}/src'), '-begin');\
            addpath(genpath('${BICAS_ROOT_PATH}/lib'), '-begin');\
            addpath(        '${IRFUMATLAB_PATH}',      '-begin');\
            error_code = $MATLAB_SCRIPT_NAME($matlab_arg_list);\
            quit(error_code);\
        catch e;\
            msg = sprintf('Could not launch the MATLAB script. The reason MIGHT be that MATLAB could not find it.\nException message: %s\n', e.message);\
            fprintf(1, msg);\
            fprintf(2, msg);\
            quit(1);\
        end"
    local matlab_error_code=$?
    if [[  "$matlab_error_code" != 0 ]] ; then
        # NOTE: Can receive error both from
        # (1) failure to launch MATLAB (command does not work, bad path, not on PATH etc.), and
        # (2) MATLAB itself (MATLAB launched, but the MATLAB code decided something was wrong).
        # The error message has to be chosen accordingly.
        echo "Error from launching MATLAB command \"${MATLAB_COMMAND}\"."     >> /dev/stderr
        echo "Bash launch function: matlab_error_code = $matlab_error_code"   >> /dev/stderr   # Send to stderr, not stdout.
    else
        echo "Bash launch function: matlab_error_code = $matlab_error_code"    # NOTE: Send to stdout ==> Piped to log file.
    fi
    
    
    # NOTE: "exit" inside a bash function does NOT EXIT the entire script file.
    exit $matlab_error_code
}



#===========================================================================================================================
# Function for sending (copying) the stderr to a log file (amending). Every row of stderr is prefixed in the log file.
# 
# NOTE: It is possible to use the same (stderr) log file for other logging (stdout) at the same time.
# The order between stdout and stderr is not guaranteed then.
# ASSUMES: stderr itself never contains the prefix. If so, the string is removed.
#===========================================================================================================================
log_stderr() {
    local log_file_stderr="$1"
    shift
    #===========================================================================================================================
    # The functionality requires some bash tricks:
    # 1) One can only pipe stdout (not stderr) and one can only "copy" stdout (not stderr) to a file with "tee -a".
    #    Therefore the code switches stderr and stdout with 3>&1 1>&2 2>&3 and then pipes and "copies" it with "tee -a".
    #    After that, outside that shell (the brackets), switches them back again.
    # 2) We want the function to return the error code of the first, innermost command. Must therefore exit inner shell with
    #    exit ${PIPESTATUS[0]} and then the whole function with it again.
    # 
    # NOTE: $STDERR_PREFIX is added to stderr and is then removed again.
    #
    # tee options:
    #        -a, --append
    #               append to the given FILEs, do not overwrite
    #===========================================================================================================================
    ( eval "$@" 3>&1 1>&2 2>&3 | sed "s/^/${STDERR_PREFIX}/" | tee -a "$log_file_stderr" | sed "s/^${STDERR_PREFIX}//" ; exit ${PIPESTATUS[0]} ) 3>&1 1>&2 2>&3
    exit ${PIPESTATUS[0]}
}



if [[ -z "$log_dir" ]]
then
    # CASE: No log file specified.
    
    launch_matlab_code "$@"                      | grep "$STDOUT_PATTERN" | sed "s/${STDOUT_PATTERN}//"
    matlab_error_code=${PIPESTATUS[0]}    # Get exit code of the first component of piping.
else
    # CASE: Log file specified.
    
    # Launch MATLAB and do nothing with stderr.
    #launch_matlab_code "$@" | tee -a "$log_file" | grep "$STDOUT_PATTERN" | sed "s/${STDOUT_PATTERN}//"
    
    # Launch MATLAB and COPY stderr to the log file (where stderr is prefixed).
    log_stderr "$log_file" launch_matlab_code "$@" | tee -a "$log_file" | grep "$STDOUT_PATTERN" | sed "s/${STDOUT_PATTERN}//"
    
    matlab_error_code=${PIPESTATUS[0]}    # Get exit code of the first component of piping.
fi



exit $matlab_error_code
