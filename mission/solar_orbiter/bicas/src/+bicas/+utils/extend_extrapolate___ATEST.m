function extend_extrapolate___ATEST
    new_test = @(inputs, outputs) (EJ_library.atest.CompareFuncResult(...
        @bicas.utils.extend_extrapolate, inputs, outputs, ...
        'equalsFunc', @(a,b) (EJ_library.utils.equals_recursive(a,b, 'epsilon', 1e-10)) ));
    tl = {};
    
    tl{end+1} = new_test(...
        {[2,4,8],               2.^[2,4,8], 4, 'negative', 'linear',      'linear'}, ...
        {[-2,0,2,4,8]', [-20,-8,2.^[2,4,8]]'});    
    
    tl{end+1} = new_test(...
        {[2,4,8],         2.^[2,4,8], 8, 'positive', 'linear',      'linear'}, ...
        {[2,4,8,12,16]', [2.^[2,4,8], 256+240, 256+240*2]'});
    tl{end+1} = new_test(...
        {[2,4,8],         2.^[2,4,8], 8, 'positive', 'linear',      'exponential'}, ...
        {[2,4,8,12,16]',  2.^[2,4,8,12,16]'});
    tl{end+1} = new_test(...
        {[2,4,8],         2.^[2,4,8], 8, 'positive', 'exponential', 'linear'}, ...
        {[2,4,8,16]',    [2.^[2,4,8], 256+240*2]'});
    tl{end+1} = new_test(...
        {[2,4,8],         2.^[2,4,8], 8, 'positive', 'exponential', 'exponential'}, ...
        {[2,4,8,16]',     2.^[2,4,8,16]'});
    
    %tl{end+1} = new_test({}, {});
    %tl{end+1} = new_test({}, {});
    
    EJ_library.atest.run_tests(tl)
end