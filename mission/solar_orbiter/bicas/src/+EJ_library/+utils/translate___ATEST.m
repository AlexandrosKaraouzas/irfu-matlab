%
% Automatic test code
%
function translate___ATEST
newTest = @(input, expOutputOrExcName) (EJ_library.atest.CompareFuncResult(...
    @EJ_library.utils.translate, ...
    input, ...
    expOutputOrExcName));

ES = char(zeros(1,0));

KV_TABLE_1 = {...
    {},                 'will_never_be_after_value'; ...
    {''},               2; ...
    {'qwe'},            'after_value';...
    {'QWE', 'ASD'},     {}; ...
    {'z','x','c','v'},  struct()};

KV_TABLE_2 = {...
    {''},               2; ...
    {ES},               3; ...
};



tl = {};

% Test match empty string.
tl{end+1} = newTest(...
    {KV_TABLE_1, '', 'a:b', ''}, ...
    {2});
% Test match alternative empty string.
tl{end+1} = newTest(...
    {KV_TABLE_1, ES, 'a:b', ''}, ...
    {2});

% Tests duplicate keys (different forms of empty string)
% NOTE: Different table.
tl{end+1} = newTest(...
    {KV_TABLE_2, ES, 'a:b', ''}, ...
    'MException');

tl{end+1} = newTest(...
    {KV_TABLE_1, 'ASD', 'a:b', ''}, ...
    {{}});
tl{end+1} = newTest(...
    {KV_TABLE_1, 'qwe', 'a:b', ''}, ...
    {'after_value'});
tl{end+1} = newTest(...
    {KV_TABLE_1, 'z', 'a:b', ''}, ...
    {struct()});

% Test duplicate keys.
tl{end+1} = newTest(...
    {{...
    {'qwe'}, 'QWE'; ...
    {'asd'}, 'ASD1'; ...
    {'asd'}, 'ASD2'; ...
    }, ...
    'asd', 'a:b'}, ...
    'MException');
tl{end+1} = newTest(...
    {{...
    {'qwe'}, 'QWE'; ...
    {'asd', 'asd'}, 'ASD1'; ...
    }, ...
    'asd', 'a:b'}, ...
    'MException');

% Test illegal key/no match.
tl{end+1} = newTest(...
    {{...
    {123}, 'value_for_illegal_key'
    }, ...
    ...
    'z', 'a:b', ''}, ...
    'MException');



EJ_library.atest.run_tests(tl)
end
