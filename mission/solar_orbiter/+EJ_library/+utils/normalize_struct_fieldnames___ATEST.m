function normalize_struct_fieldnames___ATEST
    
    NewTest = @(inputs, expOutputsException) (EJ_library.atest.CompareFuncResult(@EJ_library.utils.normalize_struct_fieldnames, ...
        inputs, expOutputsException));
    ECA = cell(1,0);    % ECA = Empty Cell Array
    tl = {};
    
%     tl{end+1} = NewTest(...
%         {es('a'), {{{'a'}, 'a'}}}, ...
%         {es('a')});

    NL1 = {...
        {{'a1', 'a2'}, 'a1'}, ...
        {{'b1', 'b2'}, 'b1'}};
    NL2 = {...
        {{'a1', 'a2'}, 'a1'}, ...
        {{'b1', 'b2'}, 'b2'}};
    NL3 = {...
        {{'a1', 'a2'}, []}, ...
        {{'b1', 'b2'}, []}};

    tl{end+1} = NewTest(...
        {es('a'), NL1, '1 match'}, ...
        'MException');
    
    tl{end+1} = NewTest(...
        {es('a'), {}, '1 match'}, ...
        {es('a'), fcl()});

    tl{end+1} = NewTest(...
        {es('a1', 'b1'), NL1, '1 match'}, ...
        {es('a1', 'b1'), fcl()});
    
    tl{end+1} = NewTest(...
        {es('a2', 'b2'), NL1, '1 match'}, ...
        {es('a1', 'b1'), fcl('a2', 'a1', ECA, 'b2', 'b1', ECA)});
    tl{end+1} = NewTest(...
        {es('a2', 'b1'), NL2, '1 match'}, ...
        {es('a1', 'b2'), fcl('a2', 'a1', ECA, 'b1', 'b2', ECA)});
    
    %tl = {};
    % Remove fields
    tl{end+1} = NewTest(...
        {es('a1', 'b2'), NL3, '1 match'}, ...
        {es(), fcl('a1', [], ECA, 'b2', [], ECA)});
    tl{end+1} = NewTest(...
        {es('a2', 'b1', 'c1'), NL3, '1 match'}, ...
        {es('c1'), fcl('a2', [], ECA, 'b1', [], ECA)});
    tl{end+1} = NewTest(...
        {es('a1'), NL3, '0-1 matches'}, ...
        {es(), fcl('a1', [], ECA)});
    
    tl{end+1} = NewTest(...
        {es('a2', 'b1', 'b2'), NL1, '1-inf matches'}, ...
        {es('a1', 'b1'), fcl('a2', 'a1', ECA, 'b1', 'b1', {'b2'})});
    tl{end+1} = NewTest(...
        {es('a2', 'b1', 'b2'), NL2, '1-inf matches'}, ...
        {es('a1', 'b2'), fcl('a2', 'a1', ECA, 'b1', 'b2', {'b2'})});
    
    EJ_library.atest.run_tests(tl)
end



% Create 1x1 struct with specified fields. Default field values.
%
% ES = Empty Struct
function S = es(varargin)
    S = EJ_library.utils.empty_struct([1,1], varargin{:});
end


% Create an FCL
% FCL = Function Change List
function fnChangeList = fcl(varargin)
    assert(mod(numel(varargin), 3) == 0)
    fnChangeList = struct(...
        'oldFieldname',               varargin(1:3:end-2)', ...
        'newFieldname',               varargin(2:3:end-1)', ...
        'ignoredCandidateFieldnames', varargin(3:3:end-0)');
    assert(size(fnChangeList, 2) == 1)
end
