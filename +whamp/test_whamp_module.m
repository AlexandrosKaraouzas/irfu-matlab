classdef test_whamp_module < matlab.unittest.TestCase
  % test_whamp_module
  properties
    % Default whamp param
    PlasmaModel = struct(...
      'B', 100,...
      'Species', {{...
        struct(...
          'm', 16, ...  % Oxygen
          'n', 1, ...
          't', 10, ...
          'a', 5, ...
          'b', 0, ...
          'd', 1, ...
          'vd', 1), ...
        struct(...
          'm', 0, ... % Electrons
          'n', 1, ...
          't', 100, ...
          'a', 1, ...
          'b', 0, ...
          'd', 1, ...
          'vd', 0) ...
        }} ...
      );
    InputParameters = struct(...
      'fstart', 0.1, ...
      'kperp', [0 10 0], ...
      'kpar', [0.0022 10 0.0022], ...
      'varyKzFirst', 1, ...
      'useLog', 0, ...
      'maxIterations', 50);
    output = [];
  end
  
  methods (Test)
    function verify_empty_default_run(testCase)
      %% Verify empty inputs gets default values
      % whamp.run
      testCase.output = whamp.run([], []);
      % Verify output info = input info
      testCase.verifyEqual(testCase.output.InputParameters, testCase.InputParameters);
      testCase.verifyEqual(testCase.output.PlasmaModel,     testCase.PlasmaModel);
    end

    function verify_default_run(testCase)
      %% Verify explicit inputs gets expected output
      % whamp.run
      testCase.output = whamp.run(testCase.PlasmaModel, testCase.InputParameters);
      % Verify output info = input info
      testCase.verifyEqual(testCase.output.InputParameters, testCase.InputParameters);
      testCase.verifyEqual(testCase.output.PlasmaModel,     testCase.PlasmaModel);
      % Verify output data is as expected.
      expOutput = struct(...
        'kperp', 0, ...
        'kpar',  0.0022, ...
        'f',     complex( 0.106373610395504,      0.000000000002707), ...
        'Ex',    complex( 0.707106781348577,      0), ...
        'Ey',    complex( 0.000000008069459,      0.707106781024518), ...
        'Ez',    complex(-2.165868468644168e-14, -1.440310176102204e-14), ...
        'Bx',    complex(-0.000000015285635,     -1.336462220194770),...
        'By',    complex( 1.336462220807257,     -0.000000000034010), ...
        'Bz',    complex( 0,                      0), ...
        'Sx',    complex( 1.151725296174240e-14,  0), ...
        'Sy',    complex( 7.659013998161915e-15,  0), ...
        'Sz',    complex( 0.752024214402888,      0), ...
        'EB',    0.529088492244447, ...
        'VGP',   0, ...
        'VGZ',   56.253614244120172, ...
        'SGP',   0, ...
        'SGZ',   4.812032661671240e-14, ...
        'u',     2.554337848356561e+05, ...
        'flagSolutionFound',    int32(1), ...
        'flagTooHeavilyDamped', int32(0), ...
        'flagNoConvergence',    int32(0));
      testCase.verifyEqual(testCase.output.flagSolutionFound, expOutput.flagSolutionFound); % strict equal
      testCase.verifyEqual(testCase.output.VGZ, expOutput.VGZ, 'AbsTol', 0.01); % equal within some error margin
      %% TODO: Write some more verificaitons
    end
  end
end
